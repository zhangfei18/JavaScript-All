// Generated by CoffeeScript 1.12.7
;(function () {
  var AsyncPool, Logger, Promise, log

  Promise = require('bluebird')

  Logger = require('logger-facade-nodejs')

  log = Logger.getLogger('async-pool')

  AsyncPool = (function () {
    function AsyncPool(resources) {
      var ref
      this.resources = resources
      this.nresources =
        (ref = resources != null ? resources.length : void 0) != null ? ref : 0
      this.waiting = []
      this.willClose = null
    }

    AsyncPool.prototype.use = function () {
      var self
      self = this
      this._checkCloseOnUse()
      return new Promise(function (res) {
        var resource
        resource = self.resources.pop()
        if (resource != null) {
          return res(resource)
        }
        return self.waiting.push(res)
      }).disposer(function (resource) {
        var waiter
        if (self.isClosed()) {
          return
        }
        waiter = self.waiting.pop()
        if (waiter != null) {
          waiter(resource)
        } else {
          self.resources.push(resource)
        }
        if (self.isClosing && (resources.length = self.nresources)) {
          return self.closeImmediate()
        }
      })
    }

    AsyncPool.prototype.close = function () {
      if (this.willClose != null) {
        return false
      }
      if (this.resources == null) {
        return true
      }
      if (this.resources.length === this.nresources) {
        this.resources = null
        return true
      } else {
        return (this.willClose = true)
      }
    }

    AsyncPool.prototype.closeAndWait = function () {
      this.close()
      if (this.resources == null) {
        return Promise.resolve(this)
      }
      this.willClose = Promise.defer()
      return this.willClose.promise
    }

    AsyncPool.prototype.closeImmediately = function () {
      var ref, ref1, ref2
      if (this.resources == null) {
        if ((ref = this.willClose) != null) {
          if (typeof ref.resolve === 'function') {
            ref.resolve(this)
          }
        }
        this.willClose = null
        return
      }
      if (this.nresources > this.resources.length) {
        if ((ref1 = this.willClose) != null) {
          if (typeof ref1.reject === 'function') {
            ref1.reject('Immediate close while resources still checked out.')
          }
        }
        this.willClose = null
        throw new Error('AsyncPool closing while resources still checked out.')
      }
      this.resources = null
      if ((ref2 = this.willClose) != null) {
        if (typeof ref2.resolve === 'function') {
          ref2.resolve(this)
        }
      }
      this.willClose = null
      return this
    }

    AsyncPool.prototype.isClosed = function () {
      return this.resources == null || this.willClose != null
    }

    AsyncPool.prototype._checkCloseOnUse = function () {
      var ref
      if (this.willClose != null) {
        if ((ref = this.willClose) != null) {
          if (typeof ref.reject === 'function') {
            ref.reject(new Error('AsyncPool used while closing.'))
          }
        }
      }
      if (
        this.resources == null ||
        this.nresources === 0 ||
        this.willClose != null
      ) {
        this.willClose = null
        this.resources = null
        throw new Error('AsyncPool is closed or without resources.')
      }
    }

    return AsyncPool
  })()

  module.exports = AsyncPool
}.call(this))
